<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="_class_collectible" xml:lang="en-US">
<title>Collectible Class Reference</title>
<indexterm><primary>Collectible</primary></indexterm>
<para>
<computeroutput>#include &lt;MapData.hpp&gt;</computeroutput>
</para>
Collaboration diagram for Collectible:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_collectible__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_collectible_1aadc689e6d7e13d4355da7ec3404105b9">Collectible</link> (const <link linkend="_class_p_vector">PVector</link> &amp;p, const unsigned int &amp;c, bool worthDouble)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_collectible_1a068a4938bf6bb68cf6e7b1fd33dd1f4c">isCorrectCollectible</link> (<link linkend="_class_p_vector">PVector</link> robotPos, double angle, double uncertainty) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_collectible_1af2442e4febf0a7c610b5314b6c81641b">operator==</link> (const <link linkend="_class_collectible">Collectible</link> &amp;lhs) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>unsigned int <link linkend="_class_collectible_1ad146cff6f283cb1aadcae32cb9809181">state</link></para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class_collectible_1a4b05ee3fb93c337fe7e96f9f27cced8c">visited</link></para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class_collectible_1a9db7f5679bc72eeb0202f2d1d524d543">color</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_collectible_1a35548d744bfc32a213a82769ef226d31">isWorthDouble</link></para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_collectible_1a8e02c21c99236a193670926c1f7cd1a9">pos</link></para>

<para>Represents the position. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A type of <link linkend="_class_p_vector">PVector</link> that can be collected by a robot.</para>

<para>Collectibles have a color value in addition to normal points in 2D-plane. They can be picked up by the robot in the CoSpace-SE. However the robot can&apos;t interact directly with this program and the map the robot uses is actually created by the <emphasis role="bold">map_interpreter.py</emphasis> script. This can result in imprecise movement and calculations. The method <emphasis role="bold"><link linkend="_class_collectible_1a068a4938bf6bb68cf6e7b1fd33dd1f4c">Collectible::isCorrectCollectible()</link></emphasis> resolves this problem taking the imprecision into account.</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>p</entry>
                                <entry>
<para>Position of the <link linkend="_class_collectible">Collectible</link>. </para>
</entry>
                            </row>
                            <row>
                                <entry>c</entry>
                                <entry>
<para>Color of the <link linkend="_class_collectible">Collectible</link>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>Generally Collectibles are only created upon initializing members of the field class. The only exception is made when a super-object spawns </para>
</note>
</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_collectible_1aadc689e6d7e13d4355da7ec3404105b9"/>    <section>
    <title>Collectible()</title>
<indexterm><primary>Collectible</primary><secondary>Collectible</secondary></indexterm>
<indexterm><primary>Collectible</primary><secondary>Collectible</secondary></indexterm>
<para><computeroutput>Collectible::Collectible (const <link linkend="_class_p_vector">PVector</link> &amp; p, const unsigned int &amp; c, bool worthDouble)</computeroutput></para>
<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 <link linkend="_class_collectible">Collectible</link> 
<literallayout>&#160;&#xa;</literallayout>
 <informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_collectible_1a068a4938bf6bb68cf6e7b1fd33dd1f4c"/>    <section>
    <title>isCorrectCollectible()</title>
<indexterm><primary>isCorrectCollectible</primary><secondary>Collectible</secondary></indexterm>
<indexterm><primary>Collectible</primary><secondary>isCorrectCollectible</secondary></indexterm>
<para><computeroutput>bool Collectible::isCorrectCollectible (<link linkend="_class_p_vector">PVector</link> robotPos, double angle, double uncertainty) const</computeroutput></para>
<para>Checks if this collectible could be the seen one (position wise)</para>

<para>The color sensors of the robots aren&apos;t the same coords as the robot&apos;s ones. Therefore it is mandatory to check whether a collectible is actually the right/seen one before changing it&apos;s state.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>robotPos</entry>
                                <entry>
<para>the actual position of the robot given by the simulator </para>
</entry>
                            </row>
                            <row>
                                <entry>angle</entry>
                                <entry>
<para>the actual angle of the robot given by the simulator </para>
</entry>
                            </row>
                            <row>
                                <entry>uncertainty</entry>
                                <entry>
<para>how imprecise the position and the angle is </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_collectible_a068a4938bf6bb68cf6e7b1fd33dd1f4c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_collectible_1af2442e4febf0a7c610b5314b6c81641b"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>Collectible</secondary></indexterm>
<indexterm><primary>Collectible</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Collectible::operator== (const <link linkend="_class_collectible">Collectible</link> &amp; lhs) const</computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_collectible_1a9db7f5679bc72eeb0202f2d1d524d543"/>    <section>
    <title>color</title>
<indexterm><primary>color</primary><secondary>Collectible</secondary></indexterm>
<indexterm><primary>Collectible</primary><secondary>color</secondary></indexterm>
<para><computeroutput>unsigned int Collectible::color</computeroutput></para>
<para>Represents the color</para>

<para>Normally a collectible can have either of the 3 colors (red, cyan, black, [special case for superobjects: pink]). Collectibles with different colors give different amounts of score points. In addition certain combinations of colors create bonus score. To track maximize the score the robot needs to now which color each object. </para>
    </section><anchor xml:id="_class_collectible_1a35548d744bfc32a213a82769ef226d31"/>    <section>
    <title>isWorthDouble</title>
<indexterm><primary>isWorthDouble</primary><secondary>Collectible</secondary></indexterm>
<indexterm><primary>Collectible</primary><secondary>isWorthDouble</secondary></indexterm>
<para><computeroutput>bool Collectible::isWorthDouble</computeroutput></para>    </section><anchor xml:id="_class_collectible_1a8e02c21c99236a193670926c1f7cd1a9"/>    <section>
    <title>pos</title>
<indexterm><primary>pos</primary><secondary>Collectible</secondary></indexterm>
<indexterm><primary>Collectible</primary><secondary>pos</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> Collectible::pos</computeroutput></para><para>

<para>Represents the position. </para>
</para>
    </section><anchor xml:id="_class_collectible_1ad146cff6f283cb1aadcae32cb9809181"/>    <section>
    <title>state</title>
<indexterm><primary>state</primary><secondary>Collectible</secondary></indexterm>
<indexterm><primary>Collectible</primary><secondary>state</secondary></indexterm>
<para><computeroutput>unsigned int Collectible::state</computeroutput></para>
<para>Represents the state</para>

<para>Depending on whether a robot has seen, not seen or collected this collectible state is changed. Since not all collectibles on the map will be available from the start it&apos;s important to mark missing ones to prevent going after non existing / not collectible collectibles</para>

<para><note><title>Note</title>

<para>state = 0 =&gt; never seen; state = 1 =&gt; seen; state = 2 =&gt; collected </para>
</note>
</para>
    </section><anchor xml:id="_class_collectible_1a4b05ee3fb93c337fe7e96f9f27cced8c"/>    <section>
    <title>visited</title>
<indexterm><primary>visited</primary><secondary>Collectible</secondary></indexterm>
<indexterm><primary>Collectible</primary><secondary>visited</secondary></indexterm>
<para><computeroutput>unsigned int Collectible::visited</computeroutput></para>
<para>Represents the number a collectible has been visited</para>

<para>Everytime the robot passes by this collectible, this variable should be counted upwards. This allows to only mark collectibles as missing if the robot has visited them a certain number of times </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
code/<link linkend="__map_data_8hpp">MapData.hpp</link>code/<link linkend="__map_data_8cpp">MapData.cpp</link></section>
</section>

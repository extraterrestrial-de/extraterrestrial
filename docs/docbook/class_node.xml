<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="_class_node" xml:lang="en-US">
<title>Node Class Reference</title>
<indexterm><primary>Node</primary></indexterm>
<para>
<computeroutput>#include &lt;Pathfinder.hpp&gt;</computeroutput>
</para>
Collaboration diagram for Node:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_node__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_node_1adad2269dc6d7dbd62a4cf8eef7da48fa">Node</link> (<link linkend="_class_p_vector">PVector</link> _pos, <link linkend="_class_field">Field</link> *_field)</para>
</listitem>
            <listitem><para>double <link linkend="_class_node_1ac916db01c0cad26a3e16c29ac68516e8">calculateCost</link> (const <link linkend="_class_node">Node</link> &amp;node)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_node_1a5749804287a44482c4b0b90cb5e70093">canSee</link> (const <link linkend="_class_node">Node</link> &amp;node, const std::vector&lt; <link linkend="_class_area">Area</link> &gt; &amp;ObstaclesStructs) const</para>
</listitem>
            <listitem><para>int <link linkend="_class_node_1a4af5b6953c9b717764557d118332f1cb">findNeighbours</link> (std::vector&lt; <link linkend="_class_node">Node</link> &gt; &amp;Nodes, const std::vector&lt; <link linkend="_class_area">Area</link> &gt; &amp;ObstacleStructs)</para>
</listitem>
            <listitem><para>void <link linkend="_class_node_1a2a9d028795b134cd1961fc606e194ec9">addNeighbour</link> (<link linkend="_class_node">Node</link> *neighbour, const double &amp;cost)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_node_1a69274b9d8270111be533536cde7dffb6">removeNeighbour</link> (<link linkend="_class_node">Node</link> *neighbour)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_node_1a994ffcc71d937a08581e415288ddafdd">isClosed</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_node_1a6b66fb95e8964a388561476467e976ae">isOpen</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_node_1af93b606cf10abfe1766617ad9de59b01">g</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_node_1aa78fc6cd04892bc631b80d023ef088c4">f</link></para>
</listitem>
            <listitem><para><link linkend="_class_node">Node</link> * <link linkend="_class_node_1a17c0c1c22413b76152cd8f513a961022">previous</link></para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_node_1afd4810249a88e6a0fe802440800daf8a">pos</link></para>
</listitem>
            <listitem><para><link linkend="_class_field">Field</link> * <link linkend="_class_node_1abafc6b4a9569e9ee3501e0b0ff9ce16c">field</link></para>
</listitem>
            <listitem><para>std::vector&lt; std::pair&lt; <link linkend="_class_node">Node</link> *, double &gt; &gt; <link linkend="_class_node_1a91fe55da0158b872e7d16e1121f61ccd">neighbours</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A point in a 2D word used by Pathfinders</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>pos</entry>
                                <entry>
<para>Position of <link linkend="_class_node">Node</link> in a 2D world. </para>
</entry>
                            </row>
                            <row>
                                <entry>field</entry>
                                <entry>
<para>field-Object a <link linkend="_class_node">Node</link> is working on.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                A Node can be described as anchor point in a 2D grid. It offers functions for quick visibility checks for other Nodes, which can even be in other 2D grids, variables to keep track of their status in the current pathfinding problem and a vector containing all visible nodes in the same grid together with respective their costs. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_node_1adad2269dc6d7dbd62a4cf8eef7da48fa"/>    <section>
    <title>Node()</title>
<indexterm><primary>Node</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>Node</secondary></indexterm>
<para><computeroutput>Node::Node (<link linkend="_class_p_vector">PVector</link> _pos, <link linkend="_class_field">Field</link> * _field)</computeroutput></para>
<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 <link linkend="_class_node">Node</link> 
<literallayout>&#160;&#xa;</literallayout>
 <informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_node_1a2a9d028795b134cd1961fc606e194ec9"/>    <section>
    <title>addNeighbour()</title>
<indexterm><primary>addNeighbour</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>addNeighbour</secondary></indexterm>
<para><computeroutput>void Node::addNeighbour (<link linkend="_class_node">Node</link> * neighbour, const double &amp; cost)</computeroutput></para>
<para>Adds a neighbour and it&apos;s cost</para>

<para>To increase the speed this method will not calculate the cost. This has to be done via &quot;calculateCost()&quot; and then funneled in as a parameter to this function </para>
    </section><anchor xml:id="_class_node_1ac916db01c0cad26a3e16c29ac68516e8"/>    <section>
    <title>calculateCost()</title>
<indexterm><primary>calculateCost</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>calculateCost</secondary></indexterm>
<para><computeroutput>double Node::calculateCost (const <link linkend="_class_node">Node</link> &amp; node)</computeroutput></para>
<para>This Method calculates a cost to a <link linkend="_class_node">Node</link></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>node</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function takes visibility into account(for that it uses Node::canSee()). If this <link linkend="_class_node">Node</link> can&apos;t see the other <link linkend="_class_node">Node</link> the cost will be -1. Other wise the cost is calculated also taking swamps into account. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_node_ac916db01c0cad26a3e16c29ac68516e8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_node_ac916db01c0cad26a3e16c29ac68516e8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_node_1a5749804287a44482c4b0b90cb5e70093"/>    <section>
    <title>canSee()</title>
<indexterm><primary>canSee</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>canSee</secondary></indexterm>
<para><computeroutput>bool Node::canSee (const <link linkend="_class_node">Node</link> &amp; node, const std::vector&lt; <link linkend="_class_area">Area</link> &gt; &amp; ObstaclesStructs) const</computeroutput></para>
<para>This Method checks if this <link linkend="_class_node">Node</link> can see a certain other <link linkend="_class_node">Node</link></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>node</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                            <row>
                                <entry>ObstaclesStructs</entry>
                                <entry>
<para>A vector containing all structures that are counted as Obstacles </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_node_a5749804287a44482c4b0b90cb5e70093_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_node_a5749804287a44482c4b0b90cb5e70093_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_node_1a4af5b6953c9b717764557d118332f1cb"/>    <section>
    <title>findNeighbours()</title>
<indexterm><primary>findNeighbours</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>findNeighbours</secondary></indexterm>
<para><computeroutput>int Node::findNeighbours (std::vector&lt; <link linkend="_class_node">Node</link> &gt; &amp; Nodes, const std::vector&lt; <link linkend="_class_area">Area</link> &gt; &amp; ObstacleStructs)</computeroutput></para>
<para>This Method gets every neighbour and calculates the cost.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>Nodes</entry>
                                <entry>
<para>A vector of pointers to Nodes </para>
</entry>
                            </row>
                            <row>
                                <entry>ObstaclesStructs</entry>
                                <entry>
<para>A vector containing all structures that are counted as Obstacles</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the number of existing neighbours</para>
</formalpara>
<note><title>Note</title>

<para>Every <link linkend="_class_node">Node</link> in Nodes has to be initialized before executing this Method </para>
</note>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_node_a4af5b6953c9b717764557d118332f1cb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_node_a4af5b6953c9b717764557d118332f1cb_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_node_1a69274b9d8270111be533536cde7dffb6"/>    <section>
    <title>removeNeighbour()</title>
<indexterm><primary>removeNeighbour</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>removeNeighbour</secondary></indexterm>
<para><computeroutput>bool Node::removeNeighbour (<link linkend="_class_node">Node</link> * neighbour)</computeroutput></para>
<para>Removes a neighbour</para>

<para>This function only removes one neighbour by iterating over &quot;neighbours&quot; and exiting as soon as one element has been found </para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_node_1aa78fc6cd04892bc631b80d023ef088c4"/>    <section>
    <title>f</title>
<indexterm><primary>f</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>f</secondary></indexterm>
<para><computeroutput>double Node::f</computeroutput></para>    </section><anchor xml:id="_class_node_1abafc6b4a9569e9ee3501e0b0ff9ce16c"/>    <section>
    <title>field</title>
<indexterm><primary>field</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>field</secondary></indexterm>
<para><computeroutput><link linkend="_class_field">Field</link>* Node::field</computeroutput></para>
<para>A pointer to the field Object this <link linkend="_class_node">Node</link> is stored in</para>

<para>This pointer can be used to find neighbours or obstacles. It is important that a node knows in which field it is operating in.</para>

<para><note><title>Note</title>

<para>This variable could be constant and is not meant to change. However for usability reasons it&apos;s not constant. </para>
</note>
</para>
    </section><anchor xml:id="_class_node_1af93b606cf10abfe1766617ad9de59b01"/>    <section>
    <title>g</title>
<indexterm><primary>g</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>g</secondary></indexterm>
<para><computeroutput>double Node::g</computeroutput></para>
<para>Doubles that are used in the A*Pathfinding algorithm</para>

<para><note><title>Note</title>

<para>These variables aren&apos;t updated automatically </para>
</note>
</para>
    </section><anchor xml:id="_class_node_1a994ffcc71d937a08581e415288ddafdd"/>    <section>
    <title>isClosed</title>
<indexterm><primary>isClosed</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>isClosed</secondary></indexterm>
<para><computeroutput>bool Node::isClosed</computeroutput></para>
<para>Booleans that indicate if this <link linkend="_class_node">Node</link> is in a special list used by the A*Pathfinding algorithm</para>

<para><note><title>Note</title>

<para>These variables aren&apos;t updated automatically </para>
</note>
</para>
    </section><anchor xml:id="_class_node_1a6b66fb95e8964a388561476467e976ae"/>    <section>
    <title>isOpen</title>
<indexterm><primary>isOpen</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>isOpen</secondary></indexterm>
<para><computeroutput>bool Node::isOpen</computeroutput></para>    </section><anchor xml:id="_class_node_1a91fe55da0158b872e7d16e1121f61ccd"/>    <section>
    <title>neighbours</title>
<indexterm><primary>neighbours</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>neighbours</secondary></indexterm>
<para><computeroutput>std::vector&lt;std::pair&lt;<link linkend="_class_node">Node</link> *, double&gt; &gt; Node::neighbours</computeroutput></para>
<para>A vector that stores all visible neighbour nodes with their respective costs.</para>

<para>To optimise speed the A*Pathfinding works on a precalculated environment. This vector keeps track of neighbours and distances/costs. </para>
    </section><anchor xml:id="_class_node_1afd4810249a88e6a0fe802440800daf8a"/>    <section>
    <title>pos</title>
<indexterm><primary>pos</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>pos</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> Node::pos</computeroutput></para>
<para>A <link linkend="_class_p_vector">PVector</link> struct that stores the position of this node</para>

<para><note><title>Note</title>

<para>This variable could be constant and is not meant to change. However for usability reasons it&apos;s not constant. </para>
</note>
</para>
    </section><anchor xml:id="_class_node_1a17c0c1c22413b76152cd8f513a961022"/>    <section>
    <title>previous</title>
<indexterm><primary>previous</primary><secondary>Node</secondary></indexterm>
<indexterm><primary>Node</primary><secondary>previous</secondary></indexterm>
<para><computeroutput><link linkend="_class_node">Node</link>* Node::previous</computeroutput></para>
<para>A pointer to the last visited <link linkend="_class_node">Node</link>. This is used by the A*Pathfinding algorithm</para>

<para><note><title>Note</title>

<para>This variable isn&apos;t updated automatically </para>
</note>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
code/<link linkend="__pathfinder_8hpp">Pathfinder.hpp</link>code/<link linkend="__pathfinder_8cpp">Pathfinder.cpp</link></section>
</section>

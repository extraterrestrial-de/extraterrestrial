<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="_class_p_vector" xml:lang="en-US">
<title>PVector Class Reference</title>
<indexterm><primary>PVector</primary></indexterm>
<para>
<computeroutput>#include &lt;PVector.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_p_vector_1aa3f2e34d647c13d05b8a318c128de955">PVector</link> ()</para>

<para>creates a 2D Point-Vector at (NAN | NAN) </para>
</listitem>
            <listitem><para><link linkend="_class_p_vector_1a4f022db626337d155cf00c2de19ba8f8">PVector</link> (double _x, double _y)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1a9cc31db5ab8d080b0f44e2229ba34a7c">set</link> (double _x, double _y)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1a6039ec3cba8898b7e102a7936572d401">normalize</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_p_vector_1a1c82ee9e026844ca5ea97297d1e3ea3c">getMag</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1a10abf0646fe82df63c0c623588c5600b">setMag</link> (double mag)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1aa0b42cf9a0da44a0ce5f28bc8937d980">rotate</link> (double angle)</para>

<para>counter-clockwise rotation </para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1ae6e16229a6ca19047b145d794d9afb8d">round</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_p_vector_1ae0757ebd2a3e671aaa082215e33b72b1">operator==</link> (const <link linkend="_class_p_vector">PVector</link> &amp;lhs) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_p_vector_1a8adf92596371a013da06f265a39d5907">operator==</link> (const double &amp;d) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_p_vector_1a049a663501a81ff364e0e1f5d36ce179">operator!=</link> (const <link linkend="_class_p_vector">PVector</link> &amp;lhs) const</para>
</listitem>
            <listitem><para>bool <link linkend="_class_p_vector_1a2d7ae0fa11dde6676fde739f45691c76">operator!=</link> (const double &amp;lhs) const</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> &amp; <link linkend="_class_p_vector_1afcbf6c7f51cc7081d4ee989fdd30b7e1">operator+=</link> (const <link linkend="_class_p_vector">PVector</link> &amp;rhs)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1a3fe1eb9a568e4368e946796d5ec8ece1">operator+</link> (const <link linkend="_class_p_vector">PVector</link> &amp;rhs)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> &amp; <link linkend="_class_p_vector_1a9d8ff99fca81009c69923eb10ad77823">operator-=</link> (const <link linkend="_class_p_vector">PVector</link> &amp;rhs)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1aa979c11e002713d4fa7d1da1205863e2">operator-</link> (const <link linkend="_class_p_vector">PVector</link> &amp;rhs)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> &amp; <link linkend="_class_p_vector_1a1db160c46509c0fcf0b174ba8bb2ba40">operator*=</link> (const double &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1a5a45ee9fed8cf1d82a7ca6aacf97c83a">operator*</link> (const double &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> &amp; <link linkend="_class_p_vector_1ac9f004a72c267687382d7e379e5d4509">operator/=</link> (const double &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1adbb03e392d72e9380b3dcccc524aef9e">operator/</link> (const double &amp;m)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector_1a9f3a2a88a16d25533e85e9001ee72217">operator bool</link> () const</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_p_vector_1adb8ed86f463adce2d0b86d1ad8c45592">str</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1a63c0e9327b326496ce26130f49e5f030">setMag</link> (<link linkend="_class_p_vector">PVector</link> &amp;pVector, double mag)</para>
</listitem>
            <listitem><para>static <link linkend="_class_p_vector">PVector</link> <link linkend="_class_p_vector_1aa627946403f5d1bb3e887150d39ea1fe">round</link> (const <link linkend="_class_p_vector">PVector</link> &amp;pVector)</para>
</listitem>
            <listitem><para>static std::string <link linkend="_class_p_vector_1af3ae7a414e7c9f539b23d0b42fdce0a8">str</link> (<link linkend="_class_p_vector">PVector</link> pVector)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>double <link linkend="_class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65">x</link></para>

<para>the x-Position of the <link linkend="_class_p_vector">PVector</link> </para>
</listitem>
            <listitem><para>double <link linkend="_class_p_vector_1a8dab9e24be65753f9b261e6329df500a">y</link></para>

<para>the x-Position of the <link linkend="_class_p_vector">PVector</link> </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>a representation of both a point and a vector in 2D space that includes some methods to manipulate and compare it. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_p_vector_1aa3f2e34d647c13d05b8a318c128de955"/>    <section>
    <title>PVector()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>PVector</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>PVector</secondary></indexterm>
<para><computeroutput>PVector::PVector ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>creates a 2D Point-Vector at (NAN | NAN) </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_aa3f2e34d647c13d05b8a318c128de955_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1a4f022db626337d155cf00c2de19ba8f8"/>    <section>
    <title>PVector()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>PVector</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>PVector</secondary></indexterm>
<para><computeroutput>PVector::PVector (double _x, double _y)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>creates a 2D Point-Vector at the given coordinates</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>_x</entry>
                                <entry>
<para>x-Position of the <link linkend="_class_p_vector">PVector</link>. </para>
</entry>
                            </row>
                            <row>
                                <entry>_y</entry>
                                <entry>
<para>y-Position of the <link linkend="_class_p_vector">PVector</link>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_p_vector_1a1c82ee9e026844ca5ea97297d1e3ea3c"/>    <section>
    <title>getMag()</title>
<indexterm><primary>getMag</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>getMag</secondary></indexterm>
<para><computeroutput>double PVector::getMag ( ) const</computeroutput></para>
<para>calculates and returns the magnitude of the <link linkend="_class_p_vector">PVector</link></para>

<para><formalpara><title>Returns</title>

<para>magnitude of the <link linkend="_class_p_vector">PVector</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_a1c82ee9e026844ca5ea97297d1e3ea3c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1a6039ec3cba8898b7e102a7936572d401"/>    <section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>normalize</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::normalize ( )</computeroutput></para>
<para>normalizes the <link linkend="_class_p_vector">PVector</link>&apos;s magnitude</para>

<para><formalpara><title>Returns</title>

<para>a copy of itself after executing the method </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_a6039ec3cba8898b7e102a7936572d401_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_a6039ec3cba8898b7e102a7936572d401_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1a9f3a2a88a16d25533e85e9001ee72217"/>    <section>
    <title>operator bool()</title>
<indexterm><primary>operator bool</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput>PVector::operator bool ( ) const<computeroutput>[explicit]</computeroutput></computeroutput></para>
<para>binary operator to check whether a PVectors position is defined or not</para>

<para><formalpara><title>Returns</title>

<para>true if both the x and the y coordinate are not NAN </para>
</formalpara>
</para>
    </section><anchor xml:id="_class_p_vector_1a2d7ae0fa11dde6676fde739f45691c76"/>    <section>
    <title>operator!=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool PVector::operator!= (const double &amp; lhs) const</computeroutput></para>
<para>binary operator to compare this <link linkend="_class_p_vector">PVector</link> with a double for equal coordinates</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>d</entry>
                                <entry>
<para>the double that should be compared to this</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if both the x and the y coordinate of this <link linkend="_class_p_vector">PVector</link> match with d </para>
</formalpara>
</para>
    </section><anchor xml:id="_class_p_vector_1a049a663501a81ff364e0e1f5d36ce179"/>    <section>
    <title>operator!=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool PVector::operator!= (const <link linkend="_class_p_vector">PVector</link> &amp; lhs) const</computeroutput></para>
<para>binary operator to compare a pVectors with a double for unequal coordinates</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>d</entry>
                                <entry>
<para>the double that should be compared to this</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if either the x or the y coordinate of this <link linkend="_class_p_vector">PVector</link> doesn&apos;t match with d </para>
</formalpara>
</para>
    </section><anchor xml:id="_class_p_vector_1a5a45ee9fed8cf1d82a7ca6aacf97c83a"/>    <section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::operator* (const double &amp; m)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_a5a45ee9fed8cf1d82a7ca6aacf97c83a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1a1db160c46509c0fcf0b174ba8bb2ba40"/>    <section>
    <title>operator*=()</title>
<indexterm><primary>operator*=</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> &amp; PVector::operator*= (const double &amp; m)</computeroutput></para>    </section><anchor xml:id="_class_p_vector_1a3fe1eb9a568e4368e946796d5ec8ece1"/>    <section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::operator+ (const <link linkend="_class_p_vector">PVector</link> &amp; rhs)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_a3fe1eb9a568e4368e946796d5ec8ece1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1afcbf6c7f51cc7081d4ee989fdd30b7e1"/>    <section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> &amp; PVector::operator+= (const <link linkend="_class_p_vector">PVector</link> &amp; rhs)</computeroutput></para>    </section><anchor xml:id="_class_p_vector_1aa979c11e002713d4fa7d1da1205863e2"/>    <section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::operator- (const <link linkend="_class_p_vector">PVector</link> &amp; rhs)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_aa979c11e002713d4fa7d1da1205863e2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1a9d8ff99fca81009c69923eb10ad77823"/>    <section>
    <title>operator-=()</title>
<indexterm><primary>operator-=</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator-=</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> &amp; PVector::operator-= (const <link linkend="_class_p_vector">PVector</link> &amp; rhs)</computeroutput></para>    </section><anchor xml:id="_class_p_vector_1adbb03e392d72e9380b3dcccc524aef9e"/>    <section>
    <title>operator/()</title>
<indexterm><primary>operator/</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator/</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::operator/ (const double &amp; m)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_adbb03e392d72e9380b3dcccc524aef9e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1ac9f004a72c267687382d7e379e5d4509"/>    <section>
    <title>operator/=()</title>
<indexterm><primary>operator/=</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator/=</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> &amp; PVector::operator/= (const double &amp; m)</computeroutput></para>    </section><anchor xml:id="_class_p_vector_1a8adf92596371a013da06f265a39d5907"/>    <section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool PVector::operator== (const double &amp; d) const</computeroutput></para>
<para>binary operator to compare this <link linkend="_class_p_vector">PVector</link> with a double for unequal coordinates</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>lhs</entry>
                                <entry>
<para>the other <link linkend="_class_p_vector">PVector</link> that should be compared to this</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if either the x or the y coordinate doesn&apos;t match </para>
</formalpara>
</para>
    </section><anchor xml:id="_class_p_vector_1ae0757ebd2a3e671aaa082215e33b72b1"/>    <section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool PVector::operator== (const <link linkend="_class_p_vector">PVector</link> &amp; lhs) const</computeroutput></para>
<para>binary operator to compare two pVectors with each other for equal coordinates</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>lhs</entry>
                                <entry>
<para>the other <link linkend="_class_p_vector">PVector</link> that should be compared to this</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if both the x and the y coordinate of each <link linkend="_class_p_vector">PVector</link> match </para>
</formalpara>
</para>
    </section><anchor xml:id="_class_p_vector_1aa0b42cf9a0da44a0ce5f28bc8937d980"/>    <section>
    <title>rotate()</title>
<indexterm><primary>rotate</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>rotate</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::rotate (double angle)</computeroutput></para><para>

<para>counter-clockwise rotation </para>
</para>

<para>rotates the <link linkend="_class_p_vector">PVector</link> counter-clockwise by a given angle</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>angle</entry>
                                <entry>
<para>the angle the <link linkend="_class_p_vector">PVector</link> should be rotated by</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>angle must be in radians</para>
</note>
<formalpara><title>Returns</title>

<para>a copy of pVector after executing the method </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_aa0b42cf9a0da44a0ce5f28bc8937d980_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_aa0b42cf9a0da44a0ce5f28bc8937d980_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1ae6e16229a6ca19047b145d794d9afb8d"/>    <section>
    <title>round()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>round</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>round</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::round ( )</computeroutput></para>
<para>rounds the coordinates of the <link linkend="_class_p_vector">PVector</link></para>

<para><formalpara><title>Returns</title>

<para>a copy this <link linkend="_class_p_vector">PVector</link> after executing the method </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_ae6e16229a6ca19047b145d794d9afb8d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1aa627946403f5d1bb3e887150d39ea1fe"/>    <section>
    <title>round()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>round</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>round</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::round (const <link linkend="_class_p_vector">PVector</link> &amp; pVector)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>rounds the coordinates of a given pVector</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>pVector</entry>
                                <entry>
<para>the <link linkend="_class_p_vector">PVector</link> the coordinates should be rounded of</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>this is the static version of <link linkend="_class_p_vector_1ae6e16229a6ca19047b145d794d9afb8d">PVector::round()</link>;</para>
</note>
<formalpara><title>Returns</title>

<para>a copy of pVector after executing the method </para>
</formalpara>
</para>
    </section><anchor xml:id="_class_p_vector_1a9cc31db5ab8d080b0f44e2229ba34a7c"/>    <section>
    <title>set()</title>
<indexterm><primary>set</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>set</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::set (double _x, double _y)</computeroutput></para>
<para>sets the position to the given coordinates</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>_x</entry>
                                <entry>
<para>new x-Position of the <link linkend="_class_p_vector">PVector</link>. </para>
</entry>
                            </row>
                            <row>
                                <entry>_y</entry>
                                <entry>
<para>new y-Position of the <link linkend="_class_p_vector">PVector</link>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a copy of itself after executing the method </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_a9cc31db5ab8d080b0f44e2229ba34a7c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1a10abf0646fe82df63c0c623588c5600b"/>    <section>
    <title>setMag()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>setMag</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>setMag</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::setMag (double mag)</computeroutput></para>
<para>sets the magnitude of the <link linkend="_class_p_vector">PVector</link></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>mag</entry>
                                <entry>
<para>the new magnitude the <link linkend="_class_p_vector">PVector</link> should have </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a copy of itself after executing the method </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_a10abf0646fe82df63c0c623588c5600b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_a10abf0646fe82df63c0c623588c5600b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1a63c0e9327b326496ce26130f49e5f030"/>    <section>
    <title>setMag()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>setMag</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>setMag</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> PVector::setMag (<link linkend="_class_p_vector">PVector</link> &amp; pVector, double mag)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>sets the magnitude of a given <link linkend="_class_p_vector">PVector</link></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>pVector</entry>
                                <entry>
<para>the <link linkend="_class_p_vector">PVector</link> the magnitude should be changed of </para>
</entry>
                            </row>
                            <row>
                                <entry>mag</entry>
                                <entry>
<para>the new magnitude pVector should have</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>this is the static version of <link linkend="_class_p_vector_1a10abf0646fe82df63c0c623588c5600b">PVector::setMag()</link>;</para>
</note>
<formalpara><title>Returns</title>

<para>a copy of pVector after executing the method </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_a63c0e9327b326496ce26130f49e5f030_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1adb8ed86f463adce2d0b86d1ad8c45592"/>    <section>
    <title>str()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>str</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>str</secondary></indexterm>
<para><computeroutput>std::string PVector::str ( ) const</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_p_vector_adb8ed86f463adce2d0b86d1ad8c45592_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_p_vector_1af3ae7a414e7c9f539b23d0b42fdce0a8"/>    <section>
    <title>str()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>str</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>str</secondary></indexterm>
<para><computeroutput>std::string PVector::str (<link linkend="_class_p_vector">PVector</link> pVector)<computeroutput>[static]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65"/>    <section>
    <title>x</title>
<indexterm><primary>x</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>x</secondary></indexterm>
<para><computeroutput>double PVector::x</computeroutput></para><para>

<para>the x-Position of the <link linkend="_class_p_vector">PVector</link> </para>
</para>
    </section><anchor xml:id="_class_p_vector_1a8dab9e24be65753f9b261e6329df500a"/>    <section>
    <title>y</title>
<indexterm><primary>y</primary><secondary>PVector</secondary></indexterm>
<indexterm><primary>PVector</primary><secondary>y</secondary></indexterm>
<para><computeroutput>double PVector::y</computeroutput></para><para>

<para>the x-Position of the <link linkend="_class_p_vector">PVector</link> </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
code/libs/<link linkend="__p_vector_8hpp">PVector.hpp</link>code/libs/<link linkend="__p_vector_8cpp">PVector.cpp</link></section>
</section>

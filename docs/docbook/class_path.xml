<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="_class_path" xml:lang="en-US">
<title>Path Class Reference</title>
<indexterm><primary>Path</primary></indexterm>
<para>
<computeroutput>#include &lt;Pathfinder.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_path_1ada3c05fb174e6878a59222b9219a113a">Path</link> (std::vector&lt; <link linkend="_class_p_vector">PVector</link> &gt; <link linkend="_class_path_1ab102b4db6b6f6c174091676e6269ad72">points</link>, double _r)</para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_path_1ae1ea4946ec41269898a40ea5d26bc2e3">getClosestNormalPoint</link> (<link linkend="_class_p_vector">PVector</link> p, double d)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_path_1af35feac82b7ef6cd57495e5328b8d4aa">isOnPath</link> (<link linkend="_class_p_vector">PVector</link> p)</para>

<para>Checks whether a point is inside the radius of the path. </para>
</listitem>
            <listitem><para>void <link linkend="_class_path_1a6e051a7405adafa723277cc6d28d6b19">addPoint</link> (<link linkend="_class_p_vector">PVector</link> p)</para>

<para>Adds a point to the <link linkend="_class_path">Path</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_class_path_1a9be76dab519b5ce2416ed86aae3db417">removeLast</link> ()</para>

<para>Removes the last point of the path. </para>
</listitem>
            <listitem><para><link linkend="_class_p_vector">PVector</link> <link linkend="_class_path_1acb65ffeab6ad10db6c88a22176252a27">getLast</link> ()</para>

<para>Returns the last point of the path. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_path_1a623d057c8c795701f9d64b8478047f9a">isEmpty</link> () const</para>

<para>Checks whether the <link linkend="_class_path">Path</link> is empty. </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class_path_1ac14f36934a2140da769bfd7d63e2677a">size</link> () const</para>

<para>Returns the size of the <link linkend="_class_path">Path</link> vector. </para>
</listitem>
            <listitem><para>double <link linkend="_class_path_1abb16e0278477c1663ea6b9d6df995e0d">length</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; <link linkend="_class_p_vector">PVector</link> &gt; <link linkend="_class_path_1ab102b4db6b6f6c174091676e6269ad72">points</link></para>

<para>Contains all points of the path in order so that p[0] -&gt; p[1] -&gt; p[2] represents the path. </para>
</listitem>
            <listitem><para>double <link linkend="_class_path_1af7f3cd570c15ff5a666d3341aa3969ce">r</link></para>

<para>The radius of the <link linkend="_class_path">Path</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A container class for a path generated by the <link linkend="_class_pathfinder">Pathfinder</link> class</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>points</entry>
                                <entry>
<para><link linkend="_class_p_vector">PVector</link> vector containing all points in the path </para>
</entry>
                            </row>
                            <row>
                                <entry>r</entry>
                                <entry>
<para>the radius of the path </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_path_1ada3c05fb174e6878a59222b9219a113a"/>    <section>
    <title>Path()</title>
<indexterm><primary>Path</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>Path</secondary></indexterm>
<para><computeroutput>Path::Path (std::vector&lt; <link linkend="_class_p_vector">PVector</link> &gt; points, double _r)</computeroutput></para>
<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 <link linkend="_class_path">Path</link> 
<literallayout>&#160;&#xa;</literallayout>
 <informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_path_1a6e051a7405adafa723277cc6d28d6b19"/>    <section>
    <title>addPoint()</title>
<indexterm><primary>addPoint</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>addPoint</secondary></indexterm>
<para><computeroutput>void Path::addPoint (<link linkend="_class_p_vector">PVector</link> p)</computeroutput></para><para>

<para>Adds a point to the <link linkend="_class_path">Path</link>. </para>
</para>
    </section><anchor xml:id="_class_path_1ae1ea4946ec41269898a40ea5d26bc2e3"/>    <section>
    <title>getClosestNormalPoint()</title>
<indexterm><primary>getClosestNormalPoint</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>getClosestNormalPoint</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> Path::getClosestNormalPoint (<link linkend="_class_p_vector">PVector</link> p, double d)</computeroutput></para>
<para>Calculates the closest normal point to a point that is extended by the factor d</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>p</entry>
                                <entry>
<para>a point the normal should be calculated to </para>
</entry>
                            </row>
                            <row>
                                <entry>d</entry>
                                <entry>
<para>the amount by which the point should lie ahead on the path.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This method calculates a point that lies on the path or an extension of one of it&apos;s lines. This point is moved by the factor d on the path. (If d = 0 than the point is just a normal point to p) </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_ae1ea4946ec41269898a40ea5d26bc2e3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_ae1ea4946ec41269898a40ea5d26bc2e3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1acb65ffeab6ad10db6c88a22176252a27"/>    <section>
    <title>getLast()</title>
<indexterm><primary>getLast</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>getLast</secondary></indexterm>
<para><computeroutput><link linkend="_class_p_vector">PVector</link> Path::getLast ( )</computeroutput></para><para>

<para>Returns the last point of the path. </para>
</para>
    </section><anchor xml:id="_class_path_1a623d057c8c795701f9d64b8478047f9a"/>    <section>
    <title>isEmpty()</title>
<indexterm><primary>isEmpty</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>isEmpty</secondary></indexterm>
<para><computeroutput>bool Path::isEmpty ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Checks whether the <link linkend="_class_path">Path</link> is empty. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_a623d057c8c795701f9d64b8478047f9a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1af35feac82b7ef6cd57495e5328b8d4aa"/>    <section>
    <title>isOnPath()</title>
<indexterm><primary>isOnPath</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>isOnPath</secondary></indexterm>
<para><computeroutput>bool Path::isOnPath (<link linkend="_class_p_vector">PVector</link> p)</computeroutput></para><para>

<para>Checks whether a point is inside the radius of the path. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_af35feac82b7ef6cd57495e5328b8d4aa_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1abb16e0278477c1663ea6b9d6df995e0d"/>    <section>
    <title>length()</title>
<indexterm><primary>length</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>length</secondary></indexterm>
<para><computeroutput>double Path::length ( )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_abb16e0278477c1663ea6b9d6df995e0d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_path_abb16e0278477c1663ea6b9d6df995e0d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
    </section><anchor xml:id="_class_path_1a9be76dab519b5ce2416ed86aae3db417"/>    <section>
    <title>removeLast()</title>
<indexterm><primary>removeLast</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>removeLast</secondary></indexterm>
<para><computeroutput>void Path::removeLast ( )</computeroutput></para><para>

<para>Removes the last point of the path. </para>
</para>
    </section><anchor xml:id="_class_path_1ac14f36934a2140da769bfd7d63e2677a"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>size</secondary></indexterm>
<para><computeroutput>unsigned int Path::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns the size of the <link linkend="_class_path">Path</link> vector. </para>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_path_1ab102b4db6b6f6c174091676e6269ad72"/>    <section>
    <title>points</title>
<indexterm><primary>points</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>points</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="_class_p_vector">PVector</link>&gt; Path::points</computeroutput></para><para>

<para>Contains all points of the path in order so that p[0] -&gt; p[1] -&gt; p[2] represents the path. </para>
</para>
    </section><anchor xml:id="_class_path_1af7f3cd570c15ff5a666d3341aa3969ce"/>    <section>
    <title>r</title>
<indexterm><primary>r</primary><secondary>Path</secondary></indexterm>
<indexterm><primary>Path</primary><secondary>r</secondary></indexterm>
<para><computeroutput>double Path::r</computeroutput></para><para>

<para>The radius of the <link linkend="_class_path">Path</link>. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
code/<link linkend="__pathfinder_8hpp">Pathfinder.hpp</link>code/<link linkend="__pathfinder_8cpp">Pathfinder.cpp</link></section>
</section>

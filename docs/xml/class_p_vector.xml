<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_p_vector" kind="class" language="C++" prot="public">
    <compoundname>PVector</compoundname>
    <includes refid="_p_vector_8hpp" local="no">PVector.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double PVector::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <briefdescription>
<para>the x-Position of the <ref refid="class_p_vector" kindref="compound">PVector</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="28" column="12" bodyfile="code/libs/PVector.hpp" bodystart="25" bodyend="-1"/>
        <referencedby refid="class_area_1a994f252a46e2b763877db5ad1e7f1cb4" compoundref="_map_data_8cpp" startline="47" endline="70">Area::Area</referencedby>
        <referencedby refid="class_robot_1aa46bf5e2662924fc2c9d7e747e12cec9" compoundref="_robot_8cpp" startline="390" endline="424">Robot::avoidVoid</referencedby>
        <referencedby refid="namespacegeometry_1a2710bf6fad3b638a4ee95abcd843d90f" compoundref="_map_data_8cpp" startline="343" endline="345">geometry::dot</referencedby>
        <referencedby refid="class_debug_window_1aba17bf3c6ad43474042028ca63421c8e" compoundref="_s_f_m_l_window_8cpp" startline="12" endline="149">DebugWindow::GameDebug</referencedby>
        <referencedby refid="class_p_vector_1a1c82ee9e026844ca5ea97297d1e3ea3c" compoundref="_p_vector_8cpp" startline="13" endline="15">getMag</referencedby>
        <referencedby refid="namespacegeometry_1a120ad790ee5a9ef199a6d67e5e9f1c90" compoundref="_map_data_8cpp" startline="347" endline="359">geometry::getNormalPoint</referencedby>
        <referencedby refid="namespacegeometry_1a228137d265482ee3fd6581e2e375eb8f" compoundref="_map_data_8cpp" startline="282" endline="303">geometry::intersection</referencedby>
        <referencedby refid="namespacegeometry_1af87847d485624e5c7ab2bb1558c3a36f" compoundref="_map_data_8cpp" startline="248" endline="250">geometry::isLeft</referencedby>
        <referencedby refid="class_path_1af35feac82b7ef6cd57495e5328b8d4aa" compoundref="_pathfinder_8cpp" startline="152" endline="168">Path::isOnPath</referencedby>
        <referencedby refid="class_p_vector_1a6039ec3cba8898b7e102a7936572d401" compoundref="_p_vector_8cpp" startline="8" endline="11">normalize</referencedby>
        <referencedby refid="class_p_vector_1a049a663501a81ff364e0e1f5d36ce179" compoundref="_p_vector_8cpp" startline="48" endline="50">operator!=</referencedby>
        <referencedby refid="class_p_vector_1a1db160c46509c0fcf0b174ba8bb2ba40" compoundref="_p_vector_8cpp" startline="74" endline="77">operator*=</referencedby>
        <referencedby refid="class_p_vector_1afcbf6c7f51cc7081d4ee989fdd30b7e1" compoundref="_p_vector_8cpp" startline="56" endline="59">operator+=</referencedby>
        <referencedby refid="class_p_vector_1a9d8ff99fca81009c69923eb10ad77823" compoundref="_p_vector_8cpp" startline="65" endline="68">operator-=</referencedby>
        <referencedby refid="class_p_vector_1ac9f004a72c267687382d7e379e5d4509" compoundref="_p_vector_8cpp" startline="83" endline="86">operator/=</referencedby>
        <referencedby refid="class_p_vector_1ae0757ebd2a3e671aaa082215e33b72b1" compoundref="_p_vector_8cpp" startline="40" endline="42">operator==</referencedby>
        <referencedby refid="class_p_vector_1aa0b42cf9a0da44a0ce5f28bc8937d980" compoundref="_p_vector_8cpp" startline="28" endline="30">rotate</referencedby>
        <referencedby refid="class_p_vector_1ae6e16229a6ca19047b145d794d9afb8d" compoundref="_p_vector_8cpp" startline="32" endline="34">round</referencedby>
        <referencedby refid="class_p_vector_1a9cc31db5ab8d080b0f44e2229ba34a7c" compoundref="_p_vector_8cpp" startline="3" endline="6">set</referencedby>
        <referencedby refid="class_p_vector_1a10abf0646fe82df63c0c623588c5600b" compoundref="_p_vector_8cpp" startline="17" endline="20">setMag</referencedby>
        <referencedby refid="namespacegeometry_1a478ae992edb02bc432e6d0420c40e336" compoundref="_map_data_8cpp" startline="320" endline="322">geometry::sqDist</referencedby>
        <referencedby refid="class_p_vector_1adb8ed86f463adce2d0b86d1ad8c45592" compoundref="_p_vector_8cpp" startline="96" endline="98">str</referencedby>
        <referencedby refid="namespacegeometry_1a0ce1748996f9e029a3cbeb665c1d17ce" compoundref="_map_data_8cpp" startline="339" endline="341">geometry::vector2Angle</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double PVector::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <briefdescription>
<para>the x-Position of the <ref refid="class_p_vector" kindref="compound">PVector</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="30" column="12" bodyfile="code/libs/PVector.hpp" bodystart="30" bodyend="-1"/>
        <referencedby refid="class_area_1a994f252a46e2b763877db5ad1e7f1cb4" compoundref="_map_data_8cpp" startline="47" endline="70">Area::Area</referencedby>
        <referencedby refid="class_robot_1aa46bf5e2662924fc2c9d7e747e12cec9" compoundref="_robot_8cpp" startline="390" endline="424">Robot::avoidVoid</referencedby>
        <referencedby refid="namespacegeometry_1a2710bf6fad3b638a4ee95abcd843d90f" compoundref="_map_data_8cpp" startline="343" endline="345">geometry::dot</referencedby>
        <referencedby refid="class_debug_window_1aba17bf3c6ad43474042028ca63421c8e" compoundref="_s_f_m_l_window_8cpp" startline="12" endline="149">DebugWindow::GameDebug</referencedby>
        <referencedby refid="class_p_vector_1a1c82ee9e026844ca5ea97297d1e3ea3c" compoundref="_p_vector_8cpp" startline="13" endline="15">getMag</referencedby>
        <referencedby refid="namespacegeometry_1a120ad790ee5a9ef199a6d67e5e9f1c90" compoundref="_map_data_8cpp" startline="347" endline="359">geometry::getNormalPoint</referencedby>
        <referencedby refid="namespacegeometry_1a228137d265482ee3fd6581e2e375eb8f" compoundref="_map_data_8cpp" startline="282" endline="303">geometry::intersection</referencedby>
        <referencedby refid="namespacegeometry_1aebf0ad8e6b1a14089df1845e5173a811" compoundref="_map_data_8cpp" startline="255" endline="280">geometry::isInside</referencedby>
        <referencedby refid="namespacegeometry_1af87847d485624e5c7ab2bb1558c3a36f" compoundref="_map_data_8cpp" startline="248" endline="250">geometry::isLeft</referencedby>
        <referencedby refid="class_path_1af35feac82b7ef6cd57495e5328b8d4aa" compoundref="_pathfinder_8cpp" startline="152" endline="168">Path::isOnPath</referencedby>
        <referencedby refid="class_p_vector_1a6039ec3cba8898b7e102a7936572d401" compoundref="_p_vector_8cpp" startline="8" endline="11">normalize</referencedby>
        <referencedby refid="class_p_vector_1a049a663501a81ff364e0e1f5d36ce179" compoundref="_p_vector_8cpp" startline="48" endline="50">operator!=</referencedby>
        <referencedby refid="class_p_vector_1a1db160c46509c0fcf0b174ba8bb2ba40" compoundref="_p_vector_8cpp" startline="74" endline="77">operator*=</referencedby>
        <referencedby refid="class_p_vector_1afcbf6c7f51cc7081d4ee989fdd30b7e1" compoundref="_p_vector_8cpp" startline="56" endline="59">operator+=</referencedby>
        <referencedby refid="class_p_vector_1a9d8ff99fca81009c69923eb10ad77823" compoundref="_p_vector_8cpp" startline="65" endline="68">operator-=</referencedby>
        <referencedby refid="class_p_vector_1ac9f004a72c267687382d7e379e5d4509" compoundref="_p_vector_8cpp" startline="83" endline="86">operator/=</referencedby>
        <referencedby refid="class_p_vector_1ae0757ebd2a3e671aaa082215e33b72b1" compoundref="_p_vector_8cpp" startline="40" endline="42">operator==</referencedby>
        <referencedby refid="class_p_vector_1aa0b42cf9a0da44a0ce5f28bc8937d980" compoundref="_p_vector_8cpp" startline="28" endline="30">rotate</referencedby>
        <referencedby refid="class_p_vector_1ae6e16229a6ca19047b145d794d9afb8d" compoundref="_p_vector_8cpp" startline="32" endline="34">round</referencedby>
        <referencedby refid="class_p_vector_1a9cc31db5ab8d080b0f44e2229ba34a7c" compoundref="_p_vector_8cpp" startline="3" endline="6">set</referencedby>
        <referencedby refid="class_p_vector_1a10abf0646fe82df63c0c623588c5600b" compoundref="_p_vector_8cpp" startline="17" endline="20">setMag</referencedby>
        <referencedby refid="namespacegeometry_1a478ae992edb02bc432e6d0420c40e336" compoundref="_map_data_8cpp" startline="320" endline="322">geometry::sqDist</referencedby>
        <referencedby refid="class_p_vector_1adb8ed86f463adce2d0b86d1ad8c45592" compoundref="_p_vector_8cpp" startline="96" endline="98">str</referencedby>
        <referencedby refid="namespacegeometry_1a0ce1748996f9e029a3cbeb665c1d17ce" compoundref="_map_data_8cpp" startline="339" endline="341">geometry::vector2Angle</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_p_vector_1aa3f2e34d647c13d05b8a318c128de955" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PVector::PVector</definition>
        <argsstring>()</argsstring>
        <name>PVector</name>
        <briefdescription>
<para>creates a 2D Point-Vector at (NAN | NAN) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="16" column="5" bodyfile="code/libs/PVector.hpp" bodystart="16" bodyend="16"/>
        <referencedby refid="class_p_vector_1a5a45ee9fed8cf1d82a7ca6aacf97c83a" compoundref="_p_vector_8cpp" startline="79" endline="81">operator*</referencedby>
        <referencedby refid="class_p_vector_1a3fe1eb9a568e4368e946796d5ec8ece1" compoundref="_p_vector_8cpp" startline="61" endline="63">operator+</referencedby>
        <referencedby refid="class_p_vector_1aa979c11e002713d4fa7d1da1205863e2" compoundref="_p_vector_8cpp" startline="70" endline="72">operator-</referencedby>
        <referencedby refid="class_p_vector_1adbb03e392d72e9380b3dcccc524aef9e" compoundref="_p_vector_8cpp" startline="88" endline="90">operator/</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a4f022db626337d155cf00c2de19ba8f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PVector::PVector</definition>
        <argsstring>(double _x, double _y)</argsstring>
        <name>PVector</name>
        <param>
          <type>double</type>
          <declname>_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates a 2D Point-Vector at the given coordinates</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_x</parametername>
</parameternamelist>
<parameterdescription>
<para>x-Position of the <ref refid="class_p_vector" kindref="compound">PVector</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_y</parametername>
</parameternamelist>
<parameterdescription>
<para>y-Position of the <ref refid="class_p_vector" kindref="compound">PVector</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="25" column="5" bodyfile="code/libs/PVector.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a9cc31db5ab8d080b0f44e2229ba34a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::set</definition>
        <argsstring>(double _x, double _y)</argsstring>
        <name>set</name>
        <param>
          <type>double</type>
          <declname>_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the position to the given coordinates</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_x</parametername>
</parameternamelist>
<parameterdescription>
<para>new x-Position of the <ref refid="class_p_vector" kindref="compound">PVector</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_y</parametername>
</parameternamelist>
<parameterdescription>
<para>new y-Position of the <ref refid="class_p_vector" kindref="compound">PVector</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of itself after executing the method </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="40" column="13" bodyfile="code/libs/PVector.cpp" bodystart="3" bodyend="6"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
        <referencedby refid="class_p_vector_1a6039ec3cba8898b7e102a7936572d401" compoundref="_p_vector_8cpp" startline="8" endline="11">normalize</referencedby>
        <referencedby refid="class_p_vector_1aa0b42cf9a0da44a0ce5f28bc8937d980" compoundref="_p_vector_8cpp" startline="28" endline="30">rotate</referencedby>
        <referencedby refid="class_p_vector_1ae6e16229a6ca19047b145d794d9afb8d" compoundref="_p_vector_8cpp" startline="32" endline="34">round</referencedby>
        <referencedby refid="class_p_vector_1a10abf0646fe82df63c0c623588c5600b" compoundref="_p_vector_8cpp" startline="17" endline="20">setMag</referencedby>
        <referencedby refid="class_robot_1acff1fa64498b60568d7446e6710f64c6" compoundref="_robot_8cpp" startline="652" endline="678">Robot::updateLoop</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a6039ec3cba8898b7e102a7936572d401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>normalizes the <ref refid="class_p_vector" kindref="compound">PVector</ref>&apos;s magnitude</para>
<para><simplesect kind="return"><para>a copy of itself after executing the method </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="47" column="13" bodyfile="code/libs/PVector.cpp" bodystart="8" bodyend="11"/>
        <references refid="class_p_vector_1a1c82ee9e026844ca5ea97297d1e3ea3c" compoundref="_p_vector_8cpp" startline="13" endline="15">getMag</references>
        <references refid="class_p_vector_1a9cc31db5ab8d080b0f44e2229ba34a7c" compoundref="_p_vector_8cpp" startline="3" endline="6">set</references>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
        <referencedby refid="class_p_vector_1a10abf0646fe82df63c0c623588c5600b" compoundref="_p_vector_8cpp" startline="17" endline="20">setMag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a1c82ee9e026844ca5ea97297d1e3ea3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PVector::getMag</definition>
        <argsstring>() const</argsstring>
        <name>getMag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculates and returns the magnitude of the <ref refid="class_p_vector" kindref="compound">PVector</ref></para>
<para><simplesect kind="return"><para>magnitude of the <ref refid="class_p_vector" kindref="compound">PVector</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="54" column="13" bodyfile="code/libs/PVector.cpp" bodystart="13" bodyend="15"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
        <referencedby refid="class_p_vector_1a6039ec3cba8898b7e102a7936572d401" compoundref="_p_vector_8cpp" startline="8" endline="11">normalize</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a10abf0646fe82df63c0c623588c5600b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::setMag</definition>
        <argsstring>(double mag)</argsstring>
        <name>setMag</name>
        <param>
          <type>double</type>
          <declname>mag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the magnitude of the <ref refid="class_p_vector" kindref="compound">PVector</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mag</parametername>
</parameternamelist>
<parameterdescription>
<para>the new magnitude the <ref refid="class_p_vector" kindref="compound">PVector</ref> should have </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of itself after executing the method </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="62" column="13" bodyfile="code/libs/PVector.cpp" bodystart="17" bodyend="20"/>
        <references refid="class_p_vector_1a6039ec3cba8898b7e102a7936572d401" compoundref="_p_vector_8cpp" startline="8" endline="11">normalize</references>
        <references refid="class_p_vector_1a9cc31db5ab8d080b0f44e2229ba34a7c" compoundref="_p_vector_8cpp" startline="3" endline="6">set</references>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
        <referencedby refid="namespacegeometry_1a120ad790ee5a9ef199a6d67e5e9f1c90" compoundref="_map_data_8cpp" startline="347" endline="359">geometry::getNormalPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1aa0b42cf9a0da44a0ce5f28bc8937d980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::rotate</definition>
        <argsstring>(double angle)</argsstring>
        <name>rotate</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>counter-clockwise rotation </para>
        </briefdescription>
        <detaileddescription>
<para>rotates the <ref refid="class_p_vector" kindref="compound">PVector</ref> counter-clockwise by a given angle</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle the <ref refid="class_p_vector" kindref="compound">PVector</ref> should be rotated by</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>angle must be in radians</para>
</simplesect>
<simplesect kind="return"><para>a copy of pVector after executing the method </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="85" column="13" bodyfile="code/libs/PVector.cpp" bodystart="28" bodyend="30"/>
        <references refid="class_p_vector_1a9cc31db5ab8d080b0f44e2229ba34a7c" compoundref="_p_vector_8cpp" startline="3" endline="6">set</references>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
        <referencedby refid="class_path_1ae1ea4946ec41269898a40ea5d26bc2e3" compoundref="_pathfinder_8cpp" startline="113" endline="138">Path::getClosestNormalPoint</referencedby>
        <referencedby refid="class_robot_1ad7b7f1a5a4e56d9e4c72a24a622d69f1" compoundref="_robot_8cpp" startline="204" endline="231">Robot::getVelocity</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1ae6e16229a6ca19047b145d794d9afb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::round</definition>
        <argsstring>()</argsstring>
        <name>round</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>rounds the coordinates of the <ref refid="class_p_vector" kindref="compound">PVector</ref></para>
<para><simplesect kind="return"><para>a copy this <ref refid="class_p_vector" kindref="compound">PVector</ref> after executing the method </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="92" column="13" bodyfile="code/libs/PVector.cpp" bodystart="32" bodyend="34"/>
        <references refid="class_p_vector_1a9cc31db5ab8d080b0f44e2229ba34a7c" compoundref="_p_vector_8cpp" startline="3" endline="6">set</references>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1ae0757ebd2a3e671aaa082215e33b72b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PVector::operator==</definition>
        <argsstring>(const PVector &amp;lhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>binary operator to compare two pVectors with each other for equal coordinates</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>the other <ref refid="class_p_vector" kindref="compound">PVector</ref> that should be compared to this</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if both the x and the y coordinate of each <ref refid="class_p_vector" kindref="compound">PVector</ref> match </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="112" column="10" bodyfile="code/libs/PVector.cpp" bodystart="40" bodyend="42"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a8adf92596371a013da06f265a39d5907" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PVector::operator==</definition>
        <argsstring>(const double &amp;d) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const double &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>binary operator to compare this <ref refid="class_p_vector" kindref="compound">PVector</ref> with a double for unequal coordinates</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>the other <ref refid="class_p_vector" kindref="compound">PVector</ref> that should be compared to this</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if either the x or the y coordinate doesn&apos;t match </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="121" column="10" bodyfile="code/libs/PVector.cpp" bodystart="44" bodyend="46"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a049a663501a81ff364e0e1f5d36ce179" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PVector::operator!=</definition>
        <argsstring>(const PVector &amp;lhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>binary operator to compare a pVectors with a double for unequal coordinates</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the double that should be compared to this</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if either the x or the y coordinate of this <ref refid="class_p_vector" kindref="compound">PVector</ref> doesn&apos;t match with d </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="130" column="10" bodyfile="code/libs/PVector.cpp" bodystart="48" bodyend="50"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a2d7ae0fa11dde6676fde739f45691c76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PVector::operator!=</definition>
        <argsstring>(const double &amp;lhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const double &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>binary operator to compare this <ref refid="class_p_vector" kindref="compound">PVector</ref> with a double for equal coordinates</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the double that should be compared to this</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if both the x and the y coordinate of this <ref refid="class_p_vector" kindref="compound">PVector</ref> match with d </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="139" column="10" bodyfile="code/libs/PVector.cpp" bodystart="52" bodyend="54"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1afcbf6c7f51cc7081d4ee989fdd30b7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
        <definition>PVector &amp; PVector::operator+=</definition>
        <argsstring>(const PVector &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="141" column="13" bodyfile="code/libs/PVector.cpp" bodystart="56" bodyend="59"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a3fe1eb9a568e4368e946796d5ec8ece1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::operator+</definition>
        <argsstring>(const PVector &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="143" column="13" bodyfile="code/libs/PVector.cpp" bodystart="61" bodyend="63"/>
        <references refid="class_p_vector_1aa3f2e34d647c13d05b8a318c128de955" compoundref="_p_vector_8hpp" startline="16" endline="16">PVector</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a9d8ff99fca81009c69923eb10ad77823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
        <definition>PVector &amp; PVector::operator-=</definition>
        <argsstring>(const PVector &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="145" column="13" bodyfile="code/libs/PVector.cpp" bodystart="65" bodyend="68"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1aa979c11e002713d4fa7d1da1205863e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::operator-</definition>
        <argsstring>(const PVector &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="147" column="13" bodyfile="code/libs/PVector.cpp" bodystart="70" bodyend="72"/>
        <references refid="class_p_vector_1aa3f2e34d647c13d05b8a318c128de955" compoundref="_p_vector_8hpp" startline="16" endline="16">PVector</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a1db160c46509c0fcf0b174ba8bb2ba40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
        <definition>PVector &amp; PVector::operator*=</definition>
        <argsstring>(const double &amp;m)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const double &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="149" column="13" bodyfile="code/libs/PVector.cpp" bodystart="74" bodyend="77"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a5a45ee9fed8cf1d82a7ca6aacf97c83a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::operator*</definition>
        <argsstring>(const double &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type>const double &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="151" column="13" bodyfile="code/libs/PVector.cpp" bodystart="79" bodyend="81"/>
        <references refid="class_p_vector_1aa3f2e34d647c13d05b8a318c128de955" compoundref="_p_vector_8hpp" startline="16" endline="16">PVector</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1ac9f004a72c267687382d7e379e5d4509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
        <definition>PVector &amp; PVector::operator/=</definition>
        <argsstring>(const double &amp;m)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const double &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="153" column="13" bodyfile="code/libs/PVector.cpp" bodystart="83" bodyend="86"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1adbb03e392d72e9380b3dcccc524aef9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::operator/</definition>
        <argsstring>(const double &amp;m)</argsstring>
        <name>operator/</name>
        <param>
          <type>const double &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="155" column="13" bodyfile="code/libs/PVector.cpp" bodystart="88" bodyend="90"/>
        <references refid="class_p_vector_1aa3f2e34d647c13d05b8a318c128de955" compoundref="_p_vector_8hpp" startline="16" endline="16">PVector</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1a9f3a2a88a16d25533e85e9001ee72217" prot="public" static="no" const="yes" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>PVector::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>binary operator to check whether a PVectors position is defined or not</para>
<para><simplesect kind="return"><para>true if both the x and the y coordinate are not NAN </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="162" column="14" bodyfile="code/libs/PVector.cpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1adb8ed86f463adce2d0b86d1ad8c45592" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PVector::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="164" column="18" bodyfile="code/libs/PVector.cpp" bodystart="96" bodyend="98"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
        <referencedby refid="class_line_1a85685f9a0e23d1ff9d03d6e32313aaeb" compoundref="_map_data_8hpp" startline="103" endline="105">Line::str</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_p_vector_1a63c0e9327b326496ce26130f49e5f030" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::setMag</definition>
        <argsstring>(PVector &amp;pVector, double mag)</argsstring>
        <name>setMag</name>
        <param>
          <type><ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
          <declname>pVector</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the magnitude of a given <ref refid="class_p_vector" kindref="compound">PVector</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pVector</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_p_vector" kindref="compound">PVector</ref> the magnitude should be changed of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mag</parametername>
</parameternamelist>
<parameterdescription>
<para>the new magnitude pVector should have</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>this is the static version of <ref refid="class_p_vector_1a10abf0646fe82df63c0c623588c5600b" kindref="member">PVector::setMag()</ref>;</para>
</simplesect>
<simplesect kind="return"><para>a copy of pVector after executing the method </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="74" column="20" bodyfile="code/libs/PVector.cpp" bodystart="22" bodyend="25"/>
        <references refid="class_p_vector_1a6039ec3cba8898b7e102a7936572d401" compoundref="_p_vector_8cpp" startline="8" endline="11">normalize</references>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1aa627946403f5d1bb3e887150d39ea1fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
        <definition>PVector PVector::round</definition>
        <argsstring>(const PVector &amp;pVector)</argsstring>
        <name>round</name>
        <param>
          <type>const <ref refid="class_p_vector" kindref="compound">PVector</ref> &amp;</type>
          <declname>pVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>rounds the coordinates of a given pVector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pVector</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="class_p_vector" kindref="compound">PVector</ref> the coordinates should be rounded of</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>this is the static version of <ref refid="class_p_vector_1ae6e16229a6ca19047b145d794d9afb8d" kindref="member">PVector::round()</ref>;</para>
</simplesect>
<simplesect kind="return"><para>a copy of pVector after executing the method </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="103" column="20" bodyfile="code/libs/PVector.cpp" bodystart="36" bodyend="38"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      <memberdef kind="function" id="class_p_vector_1af3ae7a414e7c9f539b23d0b42fdce0a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PVector::str</definition>
        <argsstring>(PVector pVector)</argsstring>
        <name>str</name>
        <param>
          <type><ref refid="class_p_vector" kindref="compound">PVector</ref></type>
          <declname>pVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/PVector.hpp" line="166" column="24" bodyfile="code/libs/PVector.cpp" bodystart="100" bodyend="102"/>
        <references refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" compoundref="_p_vector_8hpp" startline="25">x</references>
        <references refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" compoundref="_p_vector_8hpp" startline="30">y</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>a representation of both a point and a vector in 2D space that includes some methods to manipulate and compare it. </para>
    </detaileddescription>
    <location file="code/libs/PVector.hpp" line="12" column="1" bodyfile="code/libs/PVector.hpp" bodystart="12" bodyend="167"/>
    <listofallmembers>
      <member refid="class_p_vector_1a1c82ee9e026844ca5ea97297d1e3ea3c" prot="public" virt="non-virtual"><scope>PVector</scope><name>getMag</name></member>
      <member refid="class_p_vector_1a6039ec3cba8898b7e102a7936572d401" prot="public" virt="non-virtual"><scope>PVector</scope><name>normalize</name></member>
      <member refid="class_p_vector_1a9f3a2a88a16d25533e85e9001ee72217" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator bool</name></member>
      <member refid="class_p_vector_1a049a663501a81ff364e0e1f5d36ce179" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator!=</name></member>
      <member refid="class_p_vector_1a2d7ae0fa11dde6676fde739f45691c76" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator!=</name></member>
      <member refid="class_p_vector_1a5a45ee9fed8cf1d82a7ca6aacf97c83a" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator*</name></member>
      <member refid="class_p_vector_1a1db160c46509c0fcf0b174ba8bb2ba40" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator*=</name></member>
      <member refid="class_p_vector_1a3fe1eb9a568e4368e946796d5ec8ece1" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator+</name></member>
      <member refid="class_p_vector_1afcbf6c7f51cc7081d4ee989fdd30b7e1" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator+=</name></member>
      <member refid="class_p_vector_1aa979c11e002713d4fa7d1da1205863e2" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator-</name></member>
      <member refid="class_p_vector_1a9d8ff99fca81009c69923eb10ad77823" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator-=</name></member>
      <member refid="class_p_vector_1adbb03e392d72e9380b3dcccc524aef9e" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator/</name></member>
      <member refid="class_p_vector_1ac9f004a72c267687382d7e379e5d4509" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator/=</name></member>
      <member refid="class_p_vector_1ae0757ebd2a3e671aaa082215e33b72b1" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator==</name></member>
      <member refid="class_p_vector_1a8adf92596371a013da06f265a39d5907" prot="public" virt="non-virtual"><scope>PVector</scope><name>operator==</name></member>
      <member refid="class_p_vector_1aa3f2e34d647c13d05b8a318c128de955" prot="public" virt="non-virtual"><scope>PVector</scope><name>PVector</name></member>
      <member refid="class_p_vector_1a4f022db626337d155cf00c2de19ba8f8" prot="public" virt="non-virtual"><scope>PVector</scope><name>PVector</name></member>
      <member refid="class_p_vector_1aa0b42cf9a0da44a0ce5f28bc8937d980" prot="public" virt="non-virtual"><scope>PVector</scope><name>rotate</name></member>
      <member refid="class_p_vector_1ae6e16229a6ca19047b145d794d9afb8d" prot="public" virt="non-virtual"><scope>PVector</scope><name>round</name></member>
      <member refid="class_p_vector_1aa627946403f5d1bb3e887150d39ea1fe" prot="public" virt="non-virtual"><scope>PVector</scope><name>round</name></member>
      <member refid="class_p_vector_1a9cc31db5ab8d080b0f44e2229ba34a7c" prot="public" virt="non-virtual"><scope>PVector</scope><name>set</name></member>
      <member refid="class_p_vector_1a10abf0646fe82df63c0c623588c5600b" prot="public" virt="non-virtual"><scope>PVector</scope><name>setMag</name></member>
      <member refid="class_p_vector_1a63c0e9327b326496ce26130f49e5f030" prot="public" virt="non-virtual"><scope>PVector</scope><name>setMag</name></member>
      <member refid="class_p_vector_1adb8ed86f463adce2d0b86d1ad8c45592" prot="public" virt="non-virtual"><scope>PVector</scope><name>str</name></member>
      <member refid="class_p_vector_1af3ae7a414e7c9f539b23d0b42fdce0a8" prot="public" virt="non-virtual"><scope>PVector</scope><name>str</name></member>
      <member refid="class_p_vector_1ae8f2976bebde7c888ce91e84ae082b65" prot="public" virt="non-virtual"><scope>PVector</scope><name>x</name></member>
      <member refid="class_p_vector_1a8dab9e24be65753f9b261e6329df500a" prot="public" virt="non-virtual"><scope>PVector</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

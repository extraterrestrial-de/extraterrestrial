<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_common_functions_8cpp" kind="file" language="C++">
    <compoundname>CommonFunctions.cpp</compoundname>
    <includes refid="_common_functions_8hpp" local="yes">CommonFunctions.hpp</includes>
    <incdepgraph>
      <node id="2">
        <label>CommonFunctions.hpp</label>
        <link refid="_common_functions_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>code/libs/CommonFunctions.cpp</label>
        <link refid="_common_functions_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_common_functions_8cpp_1a525335710b53cb064ca56b936120431e" prot="public" static="no">
        <name>_USE_MATH_DEFINES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/CommonFunctions.cpp" line="3" column="9" bodyfile="code/libs/CommonFunctions.cpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_common_functions_8cpp_1a128d5ca6655612162ccf138e42a8b2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double toRadians</definition>
        <argsstring>(double d)</argsstring>
        <name>toRadians</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/CommonFunctions.cpp" line="5" column="8" bodyfile="code/libs/CommonFunctions.cpp" bodystart="5" bodyend="7"/>
        <referencedby refid="class_robot_1ad7b7f1a5a4e56d9e4c72a24a622d69f1" compoundref="_robot_8cpp" startline="204" endline="231">Robot::getVelocity</referencedby>
        <referencedby refid="class_collectible_1a068a4938bf6bb68cf6e7b1fd33dd1f4c" compoundref="_map_data_8cpp" startline="20" endline="25">Collectible::isCorrectCollectible</referencedby>
      </memberdef>
      <memberdef kind="function" id="_common_functions_8cpp_1ab0b015642c6b85a485f7838c5b9b1b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double toDegrees</definition>
        <argsstring>(double r)</argsstring>
        <name>toDegrees</name>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/CommonFunctions.cpp" line="9" column="8" bodyfile="code/libs/CommonFunctions.cpp" bodystart="9" bodyend="11"/>
        <referencedby refid="class_robot_1a990b30f193fbc9b294ac4785798ea394" compoundref="_robot_8cpp" startline="430" endline="546">Robot::moveToPosition</referencedby>
      </memberdef>
      <memberdef kind="function" id="_common_functions_8cpp_1a83485420504fa236938ca6fed28810a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double reverseAngle</definition>
        <argsstring>(double angle)</argsstring>
        <name>reverseAngle</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/CommonFunctions.cpp" line="13" column="8" bodyfile="code/libs/CommonFunctions.cpp" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="_common_functions_8cpp_1a215db5a1e084860b722927077d7ed55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isInRange</definition>
        <argsstring>(double value, double min, double max)</argsstring>
        <name>isInRange</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/CommonFunctions.cpp" line="18" column="6" bodyfile="code/libs/CommonFunctions.cpp" bodystart="18" bodyend="20"/>
        <referencedby refid="_color_recognition_8cpp_1a0de6cd34c3d09a619ddd9ba9e346ef10" compoundref="_color_recognition_8cpp" startline="4" endline="4">isCyan</referencedby>
        <referencedby refid="_color_recognition_8cpp_1ab31008e7e603f3af9b06544f40b8553f" compoundref="_color_recognition_8cpp" startline="7" endline="7">isOrange</referencedby>
        <referencedby refid="_color_recognition_8cpp_1a93131a6a448e02136b19cf788cbc795a" compoundref="_color_recognition_8cpp" startline="3" endline="3">isRed</referencedby>
        <referencedby refid="_color_recognition_8cpp_1a22aff79719df69d1e399682521bca3a3" compoundref="_color_recognition_8cpp" startline="9" endline="9">isSuperObj</referencedby>
        <referencedby refid="_color_recognition_8cpp_1ab44bd2d94a55aff5b357fe0a8c1cfa46" compoundref="_color_recognition_8cpp" startline="8" endline="8">isSwamp</referencedby>
        <referencedby refid="_color_recognition_8cpp_1ab786948d23021df1eb15cad46d081a64" compoundref="_color_recognition_8cpp" startline="6" endline="6">isYellow</referencedby>
      </memberdef>
      <memberdef kind="function" id="_common_functions_8cpp_1af1fdafb0217b317e8172d53abb255837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double map</definition>
        <argsstring>(double Mmin, double Mmax, double Imin, double Imax, double input)</argsstring>
        <name>map</name>
        <param>
          <type>double</type>
          <declname>Mmin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Mmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Imin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Imax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/CommonFunctions.cpp" line="22" column="8" bodyfile="code/libs/CommonFunctions.cpp" bodystart="22" bodyend="35"/>
        <referencedby refid="class_debug_window_1aba17bf3c6ad43474042028ca63421c8e" compoundref="_s_f_m_l_window_8cpp" startline="12" endline="149">DebugWindow::GameDebug</referencedby>
        <referencedby refid="class_debug_window_1aec5d94da2b89975b4923b11a3bba08bc" compoundref="_s_f_m_l_window_8cpp" startline="151" endline="158">DebugWindow::startDebugging</referencedby>
      </memberdef>
      <memberdef kind="function" id="_common_functions_8cpp_1a266c77e247ef55b1bda29e55214578f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string str</definition>
        <argsstring>(T1 x, T2 y)</argsstring>
        <name>str</name>
        <param>
          <type>T1</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/libs/CommonFunctions.cpp" line="41" column="13" bodyfile="code/libs/CommonFunctions.cpp" bodystart="41" bodyend="43"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_common_functions_8hpp" kindref="compound">CommonFunctions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="_common_functions_8cpp_1a525335710b53cb064ca56b936120431e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="_common_functions_8cpp_1a128d5ca6655612162ccf138e42a8b2af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_common_functions_8cpp_1a128d5ca6655612162ccf138e42a8b2af" kindref="member">toRadians</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d<sp/>*<sp/>M_PI<sp/>/<sp/>180;</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="_common_functions_8cpp_1ab0b015642c6b85a485f7838c5b9b1b53" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_common_functions_8cpp_1ab0b015642c6b85a485f7838c5b9b1b53" kindref="member">toDegrees</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>*<sp/>180<sp/>/<sp/>M_PI;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="_common_functions_8cpp_1a83485420504fa236938ca6fed28810a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_common_functions_8cpp_1a83485420504fa236938ca6fed28810a5" kindref="member">reverseAngle</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmod((angle<sp/>+<sp/>((angle<sp/>&gt;<sp/>0)<sp/>?<sp/>-360<sp/>:<sp/>360)),<sp/>360);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="_common_functions_8cpp_1a215db5a1e084860b722927077d7ed55c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_common_functions_8cpp_1a215db5a1e084860b722927077d7ed55c" kindref="member">isInRange</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&gt;=<sp/>min<sp/>&amp;&amp;<sp/>value<sp/>&lt;=<sp/>max;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="_common_functions_8cpp_1af1fdafb0217b317e8172d53abb255837" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_common_functions_8cpp_1af1fdafb0217b317e8172d53abb255837" kindref="member">map</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Mmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Mmax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Imin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Imax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Mmin<sp/>&gt;<sp/>Mmax)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>Mmin;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mmin<sp/>=<sp/>Mmax;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mmax<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Imin<sp/>&gt;<sp/>Imax)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>Imin;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Imin<sp/>=<sp/>Imax;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Imax<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>Mmin<sp/>+<sp/>((Mmax<sp/>-<sp/>Mmin)<sp/>/<sp/>(Imax<sp/>-<sp/>Imin))<sp/>*<sp/>(input<sp/>-<sp/>Imin);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Anything<sp/>to<sp/>String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="41" refid="_common_functions_8cpp_1a266c77e247ef55b1bda29e55214578f1" refkind="member"><highlight class="normal">std::string<sp/><ref refid="_common_functions_8cpp_1a266c77e247ef55b1bda29e55214578f1" kindref="member">str</ref>(T1<sp/>x,<sp/>T2<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::to_string(x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(y);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="code/libs/CommonFunctions.cpp"/>
  </compounddef>
</doxygen>

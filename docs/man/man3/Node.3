.TH "Node" 3 "Mon Apr 5 2021" "Extraterrestrial" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Node
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Pathfinder\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNode\fP (\fBPVector\fP _pos, \fBField\fP *_field)"
.br
.ti -1c
.RI "double \fBcalculateCost\fP (const \fBNode\fP &node)"
.br
.ti -1c
.RI "bool \fBcanSee\fP (const \fBNode\fP &node, const std::vector< \fBArea\fP > &ObstaclesStructs) const"
.br
.ti -1c
.RI "int \fBfindNeighbours\fP (std::vector< \fBNode\fP > &Nodes, const std::vector< \fBArea\fP > &ObstacleStructs)"
.br
.ti -1c
.RI "void \fBaddNeighbour\fP (\fBNode\fP *neighbour, const double &cost)"
.br
.ti -1c
.RI "bool \fBremoveNeighbour\fP (\fBNode\fP *neighbour)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "bool \fBisClosed\fP"
.br
.ti -1c
.RI "bool \fBisOpen\fP"
.br
.ti -1c
.RI "double \fBg\fP"
.br
.ti -1c
.RI "double \fBf\fP"
.br
.ti -1c
.RI "\fBNode\fP * \fBprevious\fP"
.br
.ti -1c
.RI "\fBPVector\fP \fBpos\fP"
.br
.ti -1c
.RI "\fBField\fP * \fBfield\fP"
.br
.ti -1c
.RI "std::vector< std::pair< \fBNode\fP *, double > > \fBneighbours\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A point in a 2D word used by Pathfinders
.PP
\fBTemplate Parameters\fP
.RS 4
\fIpos\fP Position of \fBNode\fP in a 2D world\&. 
.br
\fIfield\fP field-Object a \fBNode\fP is working on\&.
.RE
.PP
A Node can be described as anchor point in a 2D grid\&. It offers functions for quick visibility checks for other Nodes, which can even be in other 2D grids, variables to keep track of their status in the current pathfinding problem and a vector containing all visible nodes in the same grid together with respective their costs\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Node::Node (\fBPVector\fP _pos, \fBField\fP * _field)"

.PP
 \fBNode\fP 
.br
 
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "void Node::addNeighbour (\fBNode\fP * neighbour, const double & cost)"
Adds a neighbour and it's cost
.PP
To increase the speed this method will not calculate the cost\&. This has to be done via 'calculateCost()' and then funneled in as a parameter to this function 
.SS "double Node::calculateCost (const \fBNode\fP & node)"
This Method calculates a cost to a \fBNode\fP
.PP
\fBParameters\fP
.RS 4
\fInode\fP 
.RE
.PP
This function takes visibility into account(for that it uses Node::canSee())\&. If this \fBNode\fP can't see the other \fBNode\fP the cost will be -1\&. Other wise the cost is calculated also taking swamps into account\&. 
.SS "bool Node::canSee (const \fBNode\fP & node, const std::vector< \fBArea\fP > & ObstaclesStructs) const"
This Method checks if this \fBNode\fP can see a certain other \fBNode\fP
.PP
\fBParameters\fP
.RS 4
\fInode\fP 
.br
\fIObstaclesStructs\fP A vector containing all structures that are counted as Obstacles 
.RE
.PP

.SS "int Node::findNeighbours (std::vector< \fBNode\fP > & Nodes, const std::vector< \fBArea\fP > & ObstacleStructs)"
This Method gets every neighbour and calculates the cost\&.
.PP
\fBParameters\fP
.RS 4
\fINodes\fP A vector of pointers to Nodes 
.br
\fIObstaclesStructs\fP A vector containing all structures that are counted as Obstacles
.RE
.PP
\fBReturns\fP
.RS 4
the number of existing neighbours
.RE
.PP
\fBNote\fP
.RS 4
Every \fBNode\fP in Nodes has to be initialized before executing this Method 
.RE
.PP

.SS "bool Node::removeNeighbour (\fBNode\fP * neighbour)"
Removes a neighbour
.PP
This function only removes one neighbour by iterating over 'neighbours' and exiting as soon as one element has been found 
.SH "Member Data Documentation"
.PP 
.SS "double Node::f"

.SS "\fBField\fP* Node::field"
A pointer to the field Object this \fBNode\fP is stored in
.PP
This pointer can be used to find neighbours or obstacles\&. It is important that a node knows in which field it is operating in\&.
.PP
\fBNote\fP
.RS 4
This variable could be constant and is not meant to change\&. However for usability reasons it's not constant\&. 
.RE
.PP

.SS "double Node::g"
Doubles that are used in the A*Pathfinding algorithm
.PP
\fBNote\fP
.RS 4
These variables aren't updated automatically 
.RE
.PP

.SS "bool Node::isClosed"
Booleans that indicate if this \fBNode\fP is in a special list used by the A*Pathfinding algorithm
.PP
\fBNote\fP
.RS 4
These variables aren't updated automatically 
.RE
.PP

.SS "bool Node::isOpen"

.SS "std::vector<std::pair<\fBNode\fP *, double> > Node::neighbours"
A vector that stores all visible neighbour nodes with their respective costs\&.
.PP
To optimise speed the A*Pathfinding works on a precalculated environment\&. This vector keeps track of neighbours and distances/costs\&. 
.SS "\fBPVector\fP Node::pos"
A \fBPVector\fP struct that stores the position of this node
.PP
\fBNote\fP
.RS 4
This variable could be constant and is not meant to change\&. However for usability reasons it's not constant\&. 
.RE
.PP

.SS "\fBNode\fP* Node::previous"
A pointer to the last visited \fBNode\fP\&. This is used by the A*Pathfinding algorithm
.PP
\fBNote\fP
.RS 4
This variable isn't updated automatically 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Extraterrestrial from the source code\&.

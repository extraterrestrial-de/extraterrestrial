.TH "Pathfinder" 3 "Mon Apr 5 2021" "Extraterrestrial" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Pathfinder
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Pathfinder\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPathfinder\fP (\fBField\fP &MAP, bool trap_sensitive)"
.br
.ti -1c
.RI "\fBPath\fP \fBAStar\fP (\fBPVector\fP &start, \fBPVector\fP &end)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBNode\fP > \fBmap\fP"
.br
.RI "Contains all nodes that are important to this \fBPathfinder\fP\&. "
.ti -1c
.RI "const bool \fBtrapSensitive\fP"
.br
.ti -1c
.RI "\fBField\fP * \fBfield\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A \fBPathfinder\fP class that operates on a specific maps using nodes
.PP
\fBTemplate Parameters\fP
.RS 4
\fIMAP\fP A field-object representing a map 
.br
\fItrap_sensitive\fP A bool that determines whether the pathfinder watches for traps or not
.RE
.PP
At this point there's only one pathfinding algorithm (AStar) This works fine but may be extended later 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Pathfinder::Pathfinder (\fBField\fP & MAP, bool trap_sensitive)"

.PP
 \fBPathfinder\fP 
.br
 
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "\fBPath\fP Pathfinder::AStar (\fBPVector\fP & start, \fBPVector\fP & end)"
Finds a path between a start and an end node
.PP
Here the AStar pathfinding algorithm is used because it's fast and efficient\&. Note that this works on a prepared environment hence it is even faster\&. 
.SH "Member Data Documentation"
.PP 
.SS "\fBField\fP* Pathfinder::field"

.SS "std::vector<\fBNode\fP> Pathfinder::map"

.PP
Contains all nodes that are important to this \fBPathfinder\fP\&. 
.SS "const bool Pathfinder::trapSensitive"


.SH "Author"
.PP 
Generated automatically by Doxygen for Extraterrestrial from the source code\&.

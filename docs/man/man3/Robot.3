.TH "Robot" 3 "Mon Apr 5 2021" "Extraterrestrial" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Robot
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Robot\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::chrono::steady_clock \fBTimer\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRobot\fP (volatile int *IN, volatile int *OUT, std::array< int *, 3 > superObject, \fBField\fP *\fBmap0\fP, \fBField\fP *\fBmap1\fP)"
.br
.ti -1c
.RI "void \fBwheels\fP (int l, int r)"
.br
.RI "controls the robots wheels "
.ti -1c
.RI "void \fBmoveAlongPath\fP (\fBPath\fP &path)"
.br
.ti -1c
.RI "\fBPVector\fP \fBupdatePos\fP ()"
.br
.RI "updates the position of the robot mathematically and returns the change "
.ti -1c
.RI "int \fBmoveToPosition\fP (\fBPVector\fP p)"
.br
.ti -1c
.RI "int \fBcheckUsSensors\fP (int l, int f, int r)"
.br
.RI "checks if l, f or r is higher than the us-sensor values\&. returns a binary-encoded value "
.ti -1c
.RI "void \fBupdateLoop\fP ()"
.br
.ti -1c
.RI "void \fBgame0Loop\fP ()"
.br
.RI "game loop for first map "
.ti -1c
.RI "void \fBgame1Loop\fP ()"
.br
.RI "game loop for second map "
.ti -1c
.RI "\fBPVector\fP \fBgetVelocity\fP (long long int dt) const"
.br
.RI "gets the current velocity for a certain change in time (in ms) "
.ti -1c
.RI "bool \fBshouldCollect\fP ()"
.br
.RI "decides whether collecting a point is a good idea or not "
.ti -1c
.RI "int \fBcollect\fP ()"
.br
.RI "collects a point "
.ti -1c
.RI "bool \fBshouldDeposit\fP ()"
.br
.RI "decides whether depositing is a good idea or not "
.ti -1c
.RI "void \fBdeposit\fP ()"
.br
.RI "deposits "
.ti -1c
.RI "bool \fBshouldTeleport\fP ()"
.br
.RI "decides whether teleporting is a good idea or not "
.ti -1c
.RI "void \fBteleport\fP ()"
.br
.RI "teleports "
.ti -1c
.RI "int \fBavoidVoid\fP () const"
.br
.RI "returns a turning direction if the robot is about to drive off map "
.ti -1c
.RI "std::array< int, 4 > \fBgetDesiredLoad\fP () const"
.br
.ti -1c
.RI "std::vector< \fBPVector\fP > \fBgetPointPath\fP (std::array< int, 4 > desiredLoad)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "unsigned short \fBlevel\fP"
.br
.ti -1c
.RI "\fBPVector\fP \fBpos\fP"
.br
.ti -1c
.RI "\fBPVector\fP \fBlastPos\fP"
.br
.ti -1c
.RI "std::vector< \fBPath\fP > \fBcompletePath\fP"
.br
.ti -1c
.RI "\fBField\fP * \fBmap0\fP"
.br
.ti -1c
.RI "\fBField\fP * \fBmap1\fP"
.br
.ti -1c
.RI "\fBPathfinder\fP \fBpathfinder0\fP"
.br
.ti -1c
.RI "\fBPathfinder\fP \fBpathfinder1\fP"
.br
.ti -1c
.RI "\fBPathfinder\fP \fBpathfinder0T\fP"
.br
.ti -1c
.RI "\fBPathfinder\fP \fBpathfinder1T\fP"
.br
.ti -1c
.RI "\fBObjectLoad\fP \fBloadedObjects\fP"
.br
.ti -1c
.RI "unsigned int \fBlastRGBBonus\fP"
.br
.ti -1c
.RI "bool \fBhuntingSuperObj\fP"
.br
.ti -1c
.RI "std::vector< \fBCollectible\fP * > \fBsuperObjects\fP"
.br
.ti -1c
.RI "int \fBremainingMapTime\fP"
.br
.ti -1c
.RI "std::chrono::time_point< \fBTimer\fP > \fBlastProgramCycle\fP"
.br
.ti -1c
.RI "std::chrono::time_point< \fBTimer\fP > \fBdepositingSince\fP"
.br
.ti -1c
.RI "std::chrono::time_point< \fBTimer\fP > \fBcollectingSince\fP"
.br
.ti -1c
.RI "std::chrono::time_point< \fBTimer\fP > \fBlastPositionUpdate\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The robot of the CoSpace-simulator 
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::chrono::steady_clock \fBRobot::Timer\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "Robot::Robot (volatile int * IN, volatile int * OUT, std::array< int *, 3 > superObject, \fBField\fP * map0, \fBField\fP * map1)"

.SH "Member Function Documentation"
.PP 
.SS "int Robot::avoidVoid () const"

.PP
returns a turning direction if the robot is about to drive off map 
.SS "int Robot::checkUsSensors (int l, int f, int r)"

.PP
checks if l, f or r is higher than the us-sensor values\&. returns a binary-encoded value 
.SS "int Robot::collect ()"

.PP
collects a point 
.SS "void Robot::deposit ()"

.PP
deposits 
.SS "void Robot::game0Loop ()"

.PP
game loop for first map 
.SS "void Robot::game1Loop ()"

.PP
game loop for second map 
.SS "std::array< int, 4 > Robot::getDesiredLoad () const"

.SS "std::vector< \fBPVector\fP > Robot::getPointPath (std::array< int, 4 > desiredLoad)"

.SS "\fBPVector\fP Robot::getVelocity (long long int dt) const"

.PP
gets the current velocity for a certain change in time (in ms) 
.SS "void Robot::moveAlongPath (\fBPath\fP & path)"

.SS "int Robot::moveToPosition (\fBPVector\fP p)"

.SS "bool Robot::shouldCollect ()"

.PP
decides whether collecting a point is a good idea or not 
.SS "bool Robot::shouldDeposit ()"

.PP
decides whether depositing is a good idea or not 
.SS "bool Robot::shouldTeleport ()"

.PP
decides whether teleporting is a good idea or not 
.SS "void Robot::teleport ()"

.PP
teleports 
.SS "void Robot::updateLoop ()"

.SS "\fBPVector\fP Robot::updatePos ()"

.PP
updates the position of the robot mathematically and returns the change 
.SS "void Robot::wheels (int l, int r)"

.PP
controls the robots wheels 
.SH "Member Data Documentation"
.PP 
.SS "std::chrono::time_point<\fBTimer\fP> Robot::collectingSince"

.SS "std::vector<\fBPath\fP> Robot::completePath"

.SS "std::chrono::time_point<\fBTimer\fP> Robot::depositingSince"

.SS "bool Robot::huntingSuperObj"

.SS "\fBPVector\fP Robot::lastPos"

.SS "std::chrono::time_point<\fBTimer\fP> Robot::lastPositionUpdate"

.SS "std::chrono::time_point<\fBTimer\fP> Robot::lastProgramCycle"

.SS "unsigned int Robot::lastRGBBonus"

.SS "unsigned short Robot::level"

.SS "\fBObjectLoad\fP Robot::loadedObjects"

.SS "\fBField\fP* Robot::map0"

.SS "\fBField\fP * Robot::map1"

.SS "\fBPathfinder\fP Robot::pathfinder0"

.SS "\fBPathfinder\fP Robot::pathfinder0T"

.SS "\fBPathfinder\fP Robot::pathfinder1"

.SS "\fBPathfinder\fP Robot::pathfinder1T"

.SS "\fBPVector\fP Robot::pos"

.SS "int Robot::remainingMapTime"

.SS "std::vector<\fBCollectible\fP *> Robot::superObjects"


.SH "Author"
.PP 
Generated automatically by Doxygen for Extraterrestrial from the source code\&.

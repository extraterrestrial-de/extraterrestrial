.TH "Collectible" 3 "Mon Apr 5 2021" "Extraterrestrial" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Collectible
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MapData\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCollectible\fP (const \fBPVector\fP &p, const unsigned int &c, bool worthDouble)"
.br
.ti -1c
.RI "bool \fBisCorrectCollectible\fP (\fBPVector\fP robotPos, double angle, double uncertainty) const"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBCollectible\fP &lhs) const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "unsigned int \fBstate\fP"
.br
.ti -1c
.RI "unsigned int \fBvisited\fP"
.br
.ti -1c
.RI "unsigned int \fBcolor\fP"
.br
.ti -1c
.RI "bool \fBisWorthDouble\fP"
.br
.ti -1c
.RI "\fBPVector\fP \fBpos\fP"
.br
.RI "Represents the position\&. "
.in -1c
.SH "Detailed Description"
.PP 
A type of \fBPVector\fP that can be collected by a robot\&.
.PP
Collectibles have a color value in addition to normal points in 2D-plane\&. They can be picked up by the robot in the CoSpace-SE\&. However the robot can't interact directly with this program and the map the robot uses is actually created by the \fBmap_interpreter\&.py\fP script\&. This can result in imprecise movement and calculations\&. The method \fB\fBCollectible::isCorrectCollectible()\fP\fP resolves this problem taking the imprecision into account\&.
.PP
\fBTemplate Parameters\fP
.RS 4
\fIp\fP Position of the \fBCollectible\fP\&. 
.br
\fIc\fP Color of the \fBCollectible\fP\&.
.RE
.PP
\fBNote\fP
.RS 4
Generally Collectibles are only created upon initializing members of the field class\&. The only exception is made when a super-object spawns 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "Collectible::Collectible (const \fBPVector\fP & p, const unsigned int & c, bool worthDouble)"

.PP
 \fBCollectible\fP 
.br
 
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "bool Collectible::isCorrectCollectible (\fBPVector\fP robotPos, double angle, double uncertainty) const"
Checks if this collectible could be the seen one (position wise)
.PP
The color sensors of the robots aren't the same coords as the robot's ones\&. Therefore it is mandatory to check whether a collectible is actually the right/seen one before changing it's state\&.
.PP
\fBParameters\fP
.RS 4
\fIrobotPos\fP the actual position of the robot given by the simulator 
.br
\fIangle\fP the actual angle of the robot given by the simulator 
.br
\fIuncertainty\fP how imprecise the position and the angle is 
.RE
.PP

.SS "bool Collectible::operator== (const \fBCollectible\fP & lhs) const"

.SH "Member Data Documentation"
.PP 
.SS "unsigned int Collectible::color"
Represents the color
.PP
Normally a collectible can have either of the 3 colors (red, cyan, black, [special case for superobjects: pink])\&. Collectibles with different colors give different amounts of score points\&. In addition certain combinations of colors create bonus score\&. To track maximize the score the robot needs to now which color each object\&. 
.SS "bool Collectible::isWorthDouble"

.SS "\fBPVector\fP Collectible::pos"

.PP
Represents the position\&. 
.SS "unsigned int Collectible::state"
Represents the state
.PP
Depending on whether a robot has seen, not seen or collected this collectible state is changed\&. Since not all collectibles on the map will be available from the start it's important to mark missing ones to prevent going after non existing / not collectible collectibles
.PP
\fBNote\fP
.RS 4
state = 0 => never seen; state = 1 => seen; state = 2 => collected 
.RE
.PP

.SS "unsigned int Collectible::visited"
Represents the number a collectible has been visited
.PP
Everytime the robot passes by this collectible, this variable should be counted upwards\&. This allows to only mark collectibles as missing if the robot has visited them a certain number of times 

.SH "Author"
.PP 
Generated automatically by Doxygen for Extraterrestrial from the source code\&.
